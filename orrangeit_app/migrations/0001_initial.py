# Generated by Django 3.0.5 on 2020-05-24 09:36

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.files.storage
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_avatar', models.ImageField(blank=True, upload_to='uploads')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='GalleryImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True, storage=django.core.files.storage.FileSystemStorage(base_url='/media/my_sell/', location='/Users/egortarasov/Documents/Programming /SHP/Prom 2019-2020/orrangeit/media/my_sell/'), upload_to='gallery_images_directory')),
            ],
        ),
        migrations.CreateModel(
            name='ImagesGen',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, upload_to='uploads')),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag', models.CharField(default='', max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='Notify',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_notify_id', models.IntegerField()),
                ('status', models.BooleanField(default=True)),
                ('day_time', models.IntegerField()),
                ('event_notify_name', models.CharField(default='', max_length=128)),
                ('user_notify_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_like', models.DateTimeField(auto_now_add=True)),
                ('event_like_id', models.IntegerField()),
                ('user_liked_id', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EventInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_people_needed', models.IntegerField(auto_created=True, default=-1)),
                ('event_name', models.CharField(default='', max_length=128)),
                ('event_description', tinymce.models.HTMLField(default='', max_length=2048)),
                ('event_begin', models.DateTimeField(default=datetime.datetime.now)),
                ('event_end', models.DateTimeField(default=datetime.datetime.now)),
                ('event_address', models.CharField(default=' ', max_length=128)),
                ('is_event_active', models.BooleanField(default=True)),
                ('telegram_chat', models.CharField(default='', max_length=128)),
                ('image', models.ImageField(blank=True, null=True, storage=django.core.files.storage.FileSystemStorage(base_url='/media/my_sell/', location='/Users/egortarasov/Documents/Programming /SHP/Prom 2019-2020/orrangeit/media/my_sell/'), upload_to='image_directory_path')),
                ('is_repeated', models.BooleanField(default=False, null=True)),
                ('repeated_period', models.IntegerField(default=7, null=True)),
                ('event_author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_author', to=settings.AUTH_USER_MODEL)),
                ('event_participants', models.ManyToManyField(related_name='event_participants', to=settings.AUTH_USER_MODEL)),
                ('event_tags', models.ManyToManyField(to='orrangeit_app.Tag')),
                ('gallery', models.ManyToManyField(to='orrangeit_app.GalleryImage')),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.CharField(max_length=512)),
                ('event_id', models.IntegerField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
